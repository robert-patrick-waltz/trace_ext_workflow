<?php

/**
 * Implements hook_menu().
 */
function trace_ext_workflow_menu()
{
    $items = array();
    $items['trace_ext_workflow/list'] = array(
    'title' => 'Submitted Trace Objects',
    'description' => 'List of Submitted Objects.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('trace_ext_workflow_form'),
    'access arguments' => array('manage object properties'),
    'file' => 'includes/trace_ext_workflow_menu.inc',
  );
    return $items;
}

/**
 * Rules action callback; set a POLiCY datastream on an object and return.
 */
function trace_ext_workflow_rules_object_policy_add($object)
{
    module_load_include('inc', 'trace_ext_workflow', 'includes/trace_ext_workflow_dao');
    module_load_include('inc', 'trace_ext_workflow', 'includes/trace_ext_workflow_menu');
    module_load_include('inc', 'islandora', 'includes/utilities');
    return trace_ext_workflow_object_policy_add($object);
}

/**
 * Implimentation of hook_xml_form_builder_datastream_form_alter().
 */
function trace_ext_workflow_form_xml_form_builder_datastream_form_alter(&$form, &$form_state, $form_id) {
  array_unshift($form['update']['#submit'], 'trace_ext_workflow_update_pending_approval');
}


/**
 * Rules action callback; Confirm that the label of the DS does change during an update
 */
function trace_ext_workflow_rules_suppl_ds_update($datastream)
{
    $new_label = $_FILES['files']['name']['file'];
    // The problem this resolves appears in the islandora module that original label is
    // always kept after ingestion. a new label is never applied upon update
    if (preg_match('/^SUPPL.+$/', $datastream->id) == 1) {
        $datastream->label = $new_label;
    }
    return $datastream;
}

/**
 *
 * Implements simple_workflow_filter_select alter hook from islandora_simple_workflow.
 * workflow_manage_objects filters  the list of objects to be viewed in
 * the workflow publication screen
 *
 */
function trace_ext_workflow_simple_workflow_filter_select_alter(&$prev_inactive_objects)
{
    module_load_include('inc', 'trace_ext_workflow', 'includes/trace_ext_workflow_dao');
    module_load_include('inc', 'trace_ext_workflow', 'includes/trace_ext_workflow_menu');
    module_load_include('inc', 'islandora', 'includes/utilities');
    $filtered_inactive_objects = array();
    while (count($prev_inactive_objects) > 0) {
        $inactive_object = array_pop($prev_inactive_objects);
        $pid = $inactive_object['object']['value'];
        if (is_trace_workflow_object_accepted($pid) && can_trace_workflow_user_role_access_object($pid)) {
            array_push($filtered_inactive_objects, $inactive_object);
        }
    }
    $prev_inactive_objects =  $filtered_inactive_objects;
}

/**
 *
 * Implements simple_workflow_extend_batch alter hook
 * Applies a new policy on the object if the object is in a particular state
 *
 */
function trace_ext_workflow_simple_workflow_extend_batch_alter(&$target_object)
{
    module_load_include('inc', 'trace_ext_workflow', 'includes/trace_ext_workflow_dao');
    module_load_include('inc', 'islandora', 'includes/utilities');

    trace_ext_workflow_object_update($target_object);
}

/**
 * Implements the hook form_alter for the islandora_datastream_version_replace_form
 * The replace form needs a new submit procedure that will update the datastream and label at the  same time
 * to avoid generating multiple datastream versions for an update
 *
 *  @param array $form: Nested array of form elements that comprise the form.
 *  @param array $form_state: A keyed array containing the current state of the form. The arguments that drupal_get_form() was originally called with are available in the array $form_state['build_info']['args'].
 *  @param string $form_id: String representing the name of the form itself. Typically this is the name of the function that generated the form.
 */
function trace_ext_workflow_form_alter(&$form, &$form_state, $form_id)
{
  if ($form_id == 'islandora_datastream_version_replace_form') {
      if (((isset($form['#submit'])) && in_array('islandora_datastream_version_replace_form_submit', $form['#submit']))) {
          $form['#submit'] = array();
          $form['#submit'][] = 'trace_ext_workflow_islandora_datastream_version_replace_form_submit';
      }
  }
}

/**
 * Submit handler for the replace datastream form.
 *
 * Adds a new datastream version as latest.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function trace_ext_workflow_islandora_datastream_version_replace_form_submit($form, &$form_state)
{
    $object = islandora_object_load($form_state['object_id']);
    $form_state['redirect'] = "islandora/object/{$object->id}";
    $file = file_load($form_state['values']['file']);
    try {
        $ds = $object[$form_state['dsid']];
        if ($ds->mimetype != $file->filemime) {
            $ds->mimetype = $file->filemime;
        }
        $path = drupal_realpath($file->uri);
        if ($ds->controlGroup == 'E' || $ds->controlGroup == 'R') {
            trigger_error("Function cannot be called on a {$this->controlGroup} datastream. Please use datastream->url.", E_USER_WARNING);
            return;
        }
        $modifyDatastreamArgs = array('dsFile' => $path, 'dsLabel' => $file->filename, 'lastModifiedDate' => (string) $ds->createdDate);
        $object->repository->api->m->modifyDatastream($object->id, $ds->id, $modifyDatastreamArgs);
        //  $object->modifyDatastream($modifyDatastreamArgs);
        file_delete($file);
        rules_invoke_event('islandora_datastream_modified', $object, $ds, $ds->id);
        trace_ext_workflow_update_pending_approval($form, $form_state);

    } catch (exception $e) {
        drupal_set_message(t('An error occurred during datastream updates. See watchlog for more information.'), 'error');
        watchdog(
            'islandora',
            'Failed to add new versionable datastream.<br/>code: @code<br/>message: @msg',
            array(
                '@code' => $e->getCode(),
                '@msg' => $e->getMessage(),
            ),
            WATCHDOG_ERROR
        );
        file_delete($file);
        return;
    }
    drupal_set_message(t("Successfully Replaced"));
}


function trace_ext_workflow_update_pending_approval(&$form, &$form_state)
{
if (isset($form_state['input']['titleInfo']['title'])){
  try {
      db_update('trace_workflow_pids')
      ->fields(array(
        'label' => $form_state['input']['titleInfo']['title'],
        'datastream' => date('Y-m-d H:i:s'),
      ))
        ->condition('pid', $form_state['pid'])
        ->execute();
  } catch (Exception $e) {
      \drupal_set_message(t('Error updating accepted in trace_worflow_pids table for pid %p : %e.', array('%p' => $form_state['object_id'], '%e' => $e->getMessage())), 'error');
      \watchdog('trace_ext_workflow', 'Error inserting into trace_worflow_pids table for pid %p : %e.', array('%p' => $form_state['object_id'], '%e' => $e->getMessage()), WATCHDOG_ERROR);
  }
} else {
    try {
        db_update('trace_workflow_pids')
        ->fields(array(
          'datastream' => date('Y-m-d H:i:s'),
        ))
          ->condition('pid', $form_state['object_id'])
          ->execute();
    } catch (Exception $e) {
        \drupal_set_message(t('Error updating accepted in trace_worflow_pids table for pid %p : %e.', array('%p' => $form_state['object_id'], '%e' => $e->getMessage())), 'error');
        \watchdog('trace_ext_workflow', 'Error inserting into trace_worflow_pids table for pid %p : %e.', array('%p' => $form_state['object_id'], '%e' => $e->getMessage()), WATCHDOG_ERROR);
    }
  }

}

function trace_ext_workflow_islandora_batch_object_processed(AbstractObject $ingest_object, $is_object_state_done)
{

    module_load_include('inc', 'trace_ext_workflow', 'includes/trace_ext_workflow_dao');
    if ($is_object_state_done) {
        if ($is_object_state_done) {
            $key = IslandoraScanBatchObjectDigitalCommons::$BATCH_OBJECT_PREFIX . $ingest_object->id;
            $cached_object = cache_get($key, 'cache_field');
            $islandoraScanBatchObjectDigitalCommons = $cached_object->data;

            if (isset($islandoraScanBatchObjectDigitalCommons) && is_a($islandoraScanBatchObjectDigitalCommons, 'IslandoraScanBatchObjectDigitalCommons')) {
                # determine if the object needs to be embargoed or withdrawn

                $object_info = $islandoraScanBatchObjectDigitalCommons->getObjectInfo();
                $is_object_withdrawn = false;
                $digital_commons_metadata_xml = $object_info->getDigitalCommonsMetadata();
                $digital_commons_metadata_domDocument = new DOMDocument();
                $digital_commons_metadata_domDocument->loadXML($digital_commons_metadata_xml);
                $digital_commons_metadata_xpath = new DOMXPath($digital_commons_metadata_domDocument);
                $digital_commons_metadata_published_datestr = $digital_commons_metadata_xpath->evaluate('string(//documents/document/publication-date)');

                $digital_commons_metadata_published_timestamp = strtotime($digital_commons_metadata_published_datestr);
                if (isset($digital_commons_metadata_published_timestamp)) {

                    if ($digital_commons_metadata_published_timestamp <= time()) {

                        $policy_xml = trace_ext_workflow_retrieve_published_policy_xml($ingest_object);
                        $modifyDatastreamArgs = array('dsString' => $policy_xml);
                        try {
                            $islandoraScanBatchObjectDigitalCommons->repository->api->m->modifyDatastream($islandoraScanBatchObjectDigitalCommons->id, 'POLICY', $modifyDatastreamArgs);
                        } catch (Exception $exception) {
                            echo $exception->getCode() . " : " . $exception->getMessage() . "\n";
                            watchdog('trace_ext_workflow', 'trace_ext_workflow_islandora_batch_object_processed cannot modify datastreams published policies for  %p.', array('%p' => $ingest_object->id), WATCHDOG_ERROR);
                        }
                        $modifyObjectArgs = array('state' => 'A');
                        try {
                            $islandoraScanBatchObjectDigitalCommons->repository->api->m->modifyObject($islandoraScanBatchObjectDigitalCommons->id, $modifyObjectArgs);
                        } catch (Exception $exception) {
                            echo $exception->getCode() . " : " . $exception->getMessage() . "\n";
                            watchdog('trace_ext_workflow', 'trace_ext_workflow_islandora_batch_object_processed cannot modify object published policies for  %p.', array('%p' => $ingest_object->id), WATCHDOG_ERROR);
                        }
                        //remove record from database
                        trace_ext_workflow_delete_record_from_workflow($islandoraScanBatchObjectDigitalCommons->id);
                    } else {

                        $policy_xml = trace_ext_workflow_accept_policy($ingest_object);
                        $modifyDatastreamArgs = array('dsString' => $policy_xml);
                        try {
                            $islandoraScanBatchObjectDigitalCommons->repository->api->m->modifyDatastream($islandoraScanBatchObjectDigitalCommons->id, 'POLICY', $modifyDatastreamArgs);
                        } catch (Exception $exception) {
                            echo $exception->getCode() . " : " . $exception->getMessage() . "\n";
                            watchdog('trace_ext_workflow', 'trace_ext_workflow_islandora_batch_object_processed cannot modify datastreams accepted policies for  %p.', array('%p' => $ingest_object->id), WATCHDOG_ERROR);
                        }
                        $modifyObjectArgs = array('state' => 'I');
                        try {
                        $islandoraScanBatchObjectDigitalCommons->repository->api->m->modifyObject($islandoraScanBatchObjectDigitalCommons->id, $modifyObjectArgs);
                        } catch (Exception $exception) {
                            echo $exception->getCode() . " : " . $exception->getMessage() . "\n";
                            watchdog('trace_ext_workflow', 'trace_ext_workflow_islandora_batch_object_processed cannot modify object accepted policies for  %p.', array('%p' => $ingest_object->id), WATCHDOG_ERROR);
                        }
                        trace_ext_workflow_update_accepted_record($islandoraScanBatchObjectDigitalCommons->id);
                    }

                }
            }
        }
    }
}
